<?php

/**
 * @file
 * Contains sah_modifications.module.
 */

use Drupal\comment\Entity\Comment;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\Entity\File;

/**
 * Implements hook_help().
 */
function sah_modifications_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sah_modifications module.
    case 'help.page.sah_modifications':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom modifications for SAH') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function sah_modifications_mail($key, &$message, $params) {
  switch ($key) {
    case 'quote_notification_user':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['salutation'] = $params['salutation'];
      $message['data'] = $params['data'];
      break;
  }
}

/**
 * implements hook_mail_alter()
 */
function sah_modifications_mail_alter(&$message) {
  if($message['id'] == 'user_register_no_approval_required' || $message['id'] == 'user_password_reset') {
    $account = $message['params']['account'];
    $data = [];
    $data['username'] = $account->name->value;
    $data['url'] = user_pass_reset_url($account);
    $message['data'] = $data;
  }
}

function sah_modifications_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == "node" && $entity->getType() == "ct_assignment") {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    if (!in_array('administrator',$roles) || !in_array('manager',$roles)) {
      $file_names = [];
      foreach($entity->get('field_as_attachment')->getValue() as $file_id){
        $file = File::load($file_id['target_id']);
        $file_names[] = '<li>'.$file->filename->value.'</li>';
      }
      $values = [
        'entity_type' => 'node',
        'entity_id'   => $entity->id(),
        'field_name'  => 'field_as_comment',
        'uid' => $entity->getOwnerId(),
        'comment_type' => 'comment',
        'subject' => 'Student Auto Comment',
        'comment_body' => [
          'summary' => '',
          'value' => 'I have added new attachment(s). The files are: <ul>'.implode('', $file_names).'</ul>',
          'format' => 'basic_html',
        ],
        'status' => 1,
      ];
      $comment = Comment::create($values);
      $comment->save();
    }
  }
}

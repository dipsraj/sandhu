<?php

/**
 * @file
 * Contains sah_modifications.module.
 */

use Drupal\comment\Entity\Comment;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function sah_modifications_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sah_modifications module.
    case 'help.page.sah_modifications':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom modifications for SAH') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function sah_modifications_mail($key, &$message, $params) {
  switch ($key) {
    case 'quote_notification_user':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['salutation'] = $params['salutation'];
      $message['data'] = $params['data'];
      break;
  }
}

/**
 * implements hook_mail_alter()
 */
function sah_modifications_mail_alter(&$message) {
  if($message['id'] == 'user_register_no_approval_required' || $message['id'] == 'user_password_reset') {
    $account = $message['params']['account'];
    $data = [];
    $data['username'] = $account->name->value;
    $data['url'] = user_pass_reset_url($account);
    $message['data'] = $data;
  }
}

/**
 * implements hook_form_alter()
 */
function sah_modifications_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  if($form_id == "node_ct_assignment_form") {
    if (!in_array('administrator',$roles) && !in_array('manager',$roles)) {
      $form['field_as_admin_write_up_words']['#access'] = FALSE;
      $form['field_as_admin_practical_words']['#access'] = FALSE;
      $form['field_as_admin_assignment_status']['#access'] = FALSE;
    }
    else {
      $form['actions']['submit']['#submit'][] = 'assignment_post_submit';
    }
  }
  if($form_id == "node_ct_assignment_edit_form") {
    if (!in_array('administrator',$roles) && !in_array('manager',$roles)) {
      $form['#title'] = "Update Attachments";
      $form['title']['#access'] = FALSE;
      $form['field_as_description']['#access'] = FALSE;
      $form['field_as_field']['#access'] = FALSE;
      $form['field_as_topic']['#access'] = FALSE;
      $form['field_as_expected_delivery']['#access'] = FALSE;
      $form['field_as_reference_count']['#access'] = FALSE;
      $form['field_as_reference_style']['#access'] = FALSE;
      $form['field_as_serial']['#access'] = FALSE;
      $form['field_as_university_country']['#access'] = FALSE;
      $form['field_as_words']['#access'] = FALSE;
      $form['field_as_admin_write_up_words']['#access'] = FALSE;
      $form['field_as_admin_practical_words']['#access'] = FALSE;
      $form['field_as_admin_assignment_status']['#access'] = FALSE;
    }
    else {
      $form['actions']['submit']['#submit'][] = 'assignment_post_submit';
    }
  }
}

/**
 * implements hook_entity_update()
 */
function sah_modifications_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == "node" && $entity->getType() == "ct_assignment") {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    // Adding Automated comment if Student updates file attachments
    if (!in_array('administrator',$roles) && !in_array('manager',$roles)) {
      $original_count=0;
      foreach($entity->original->get('field_as_attachment')->getValue() as $file_id){
        $original_count+=1;
      }
      $new_count=0;
      foreach($entity->get('field_as_attachment')->getValue() as $file_id){
        $new_count+=1;
      }
      if ($new_count != $original_count) {
        $file_names = [];
        foreach($entity->get('field_as_attachment')->getValue() as $file_id){
          $file = File::load($file_id['target_id']);
          $file_names[] = '<li>'.$file->filename->value.'</li>';
        }
        $values = [
          'entity_type' => 'node',
          'entity_id'   => $entity->id(),
          'field_name'  => 'field_as_comment',
          'uid' => $entity->getOwnerId(),
          'comment_type' => 'comment',
          'subject' => 'Student Auto Comment',
          'comment_body' => [
            'summary' => '',
            'value' => 'I have added new attachment(s). The files are: <ul>'.implode('', $file_names).'</ul>',
            'format' => 'basic_html',
          ],
          'status' => 1,
        ];
        $comment = Comment::create($values);
        $comment->save();
      }
    }
  }
}

function assignment_post_submit(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $write_up_words = 0;
  if($entity->get('field_as_admin_write_up_words')->getValue()) {
    $write_up_words = intval($entity->field_as_admin_write_up_words->value);
  }
  $practical_words = 0;
  if($entity->get('field_as_admin_practical_words')->getValue()) {
    $practical_words = intval($entity->field_as_admin_practical_words->value);
  }
  $entity->set('field_as_words',$write_up_words+$practical_words)->save();
}
